[[plugins]]
on_func = 'dein#'
repo    = 'Shougo/dein.vim'

[[plugins]]
build       = 'bash install.sh'
hook_source = 'source $VIM_PATH/configs/vim-clap.vim'
merged      = 0
on_map      = { n = '<Plug>' }
repo        = 'liuchengxu/vim-clap'

[[plugins]]
on_source = 'vim-clap'
repo      = 'vn-ki/coc-clap'

[[plugins]]
on_cmd = 'MundoToggle'
repo   = 'simnalamburt/vim-mundo'

[[plugins]]
on_cmd = 'AnyJump'
repo   = 'pechorin/any-jump.vim'

[[plugins]]
on_cmd = [
  'FloatermNew',
  'FloatermToggle',
  'FloatermPrev',
  'FloatermNext',
  'FloatermSend',
]
repo   = 'voldikss/vim-floaterm'

[[plugins]]
hook_post_source = '''
lua <<EOF
require"toggleterm".setup{
  size = 20,
  open_mapping = [[<c-\>]],
  shade_filetypes = {},
  shade_terminals = true,
  persist_size = true,
  direction = 'horizontal'
}
EOF
'''
repo             = 'akinsho/nvim-toggleterm.lua'

[[plugins]]
hook_source = '''
    let g:vista#renderer#enable_icon = 1
    let g:vista_disable_statusline = 1
    let g:vista_default_executive = 'ctags'
    let g:vista_echo_cursor_strategy = 'floating_win'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ 'yaml': 'coc',
      \ 'typescript': 'coc',
      \ 'typescriptreact': 'coc',
      \ }
'''
on_cmd      = ['Vista', 'Vista!', 'Vista!!']
repo        = 'liuchengxu/vista.vim'

[[plugins]]
hook_source = '''
  let g:gutentags_cache_dir = $DATA_PATH . '/tags'
  let g:gutentags_project_root = ['.root', '.git', '.svn', '.hg', '.project','go.mod','.Cargo.toml','tsconfig.js','jsconfig.js']
  let g:gutentags_generate_on_write = 0
  let g:gutentags_generate_on_missing = 0
  let g:gutentags_generate_on_new = 0
  let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]
'''
if          = "executable('ctags')"
on_event    = ['BufReadPost', 'BufWritePost']
repo        = 'ludovicchabant/vim-gutentags'

[[plugins]]
hook_add         = '''
  let g:which_key_map =  { 'name' : 'Leader'}
  let g:which_key_localmap =  {'name' : 'LocalLeader'}
'''
hook_post_source = '''
  function! s:register_whichkey()
    let s:leader_key=substitute(get(g:,"mapleader","\\"), ' ', ',', '')
    let s:localleader_key= get(g:,'maplocalleader',';')
    call which_key#register(s:leader_key, 'g:which_key_map')
    call which_key#register(s:localleader_key, 'g:which_key_localmap')
  endfunction
  call s:register_whichkey()
'''
on_cmd           = ['Whichkey', 'Whichkey!']
repo             = 'liuchengxu/vim-which-key'

[[plugins]]
hook_source = '''
augroup user_fugitive_plugin
  autocmd!
  autocmd FileType fugitiveblame normal A
augroup END
'''
on_cmd      = ['G', 'Git', 'Gfetch', 'Gpush', 'Glog', 'Gclog', 'Gdiffsplit']
repo        = 'tpope/vim-fugitive'

[[plugins]]
on_event = ['BufReadPre', 'BufNewFile']
repo     = 'airblade/vim-gitgutter'

[[plugins]]
on_cmd = 'AsyncRun'
repo   = 'skywind3000/asyncrun.vim'

[[plugins]]
on_ft = ['python', 'javascript']
repo  = 'kkoomen/vim-doge'
